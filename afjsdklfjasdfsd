#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from pong_interfaces.msg import PaddlePosition
import pygame
import sys


class PaddleController(Node):
    def __init__(self, player_name):
        super().__init__(f'{player_name}_paddle')
        self.player_name = player_name

        # Configuración de pygame
        pygame.init()
        pygame.display.set_mode((1, 1))  # Ventana mínima necesaria
        pygame.key.set_repeat(100, 25)  # Habilitar repetición de teclas

        # Configuración ROS2
        self.publisher = self.create_publisher(
            PaddlePosition,
            f'{player_name}_position',
            10
        )

        self.paddle_speed = 5
        self.y_position = 300
        self.get_logger().info(f"Controlador de {player_name} inicializado")

    def handle_keyboard(self):
        keys = pygame.key.get_pressed()
        moved = False

        if self.player_name == 'player1':
            if keys[pygame.K_w]:
                self.y_position -= self.paddle_speed
                self.get_logger().info("Tecla W presionada - Moviendo arriba")
                moved = True
            if keys[pygame.K_s]:
                self.y_position += self.paddle_speed
                self.get_logger().info("Tecla S presionada - Moviendo abajo")
                moved = True
        else:  # player2
            if keys[pygame.K_UP]:
                self.y_position -= self.paddle_speed
                self.get_logger().info("Tecla UP presionada - Moviendo arriba")
                moved = True
            if keys[pygame.K_DOWN]:
                self.y_position += self.paddle_speed
                self.get_logger().info("Tecla DOWN presionada - Moviendo abajo")
                moved = True

        # Limitar posición y publicar si hubo movimiento
        self.y_position = max(0, min(600, self.y_position))
        if moved:
            msg = PaddlePosition()
            msg.y_position = float(self.y_position)
            msg.player_name = self.player_name
            self.publisher.publish(msg)


def main(args=None):
    print("🚀 MAIN EJECUTADO 🚀")
    rclpy.init(args=args)

    if len(sys.argv) < 2:
        print("Uso: paddle_node.py player1|player2")
        return

    player_name = sys.argv[1]
    if player_name not in ['player1', 'player2']:
        print("El jugador debe ser 'player1' o 'player2'")
        return

    controller = PaddleController(player_name)

    try:
        while rclpy.ok():
            # Procesar eventos de pygame (IMPORTANTE)
            pygame.event.pump()

            # Manejar teclado
            controller.handle_keyboard()

            # Procesar callbacks ROS2
            rclpy.spin_once(controller, timeout_sec=0.01)

    except KeyboardInterrupt:
        pass
    finally:
        controller.destroy_node()
        rclpy.shutdown()
        pygame.quit()


if __name__ == '__main__':

    main()
